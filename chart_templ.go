// Code generated by templ - DO NOT EDIT.

// templ: version: v0.3.833
package main

//lint:file-ignore SA4006 This context is only used if a nested component is present.

import "github.com/a-h/templ"
import templruntime "github.com/a-h/templ/runtime"

func graph(dataset [][2]any) templ.ComponentScript {
	return templ.ComponentScript{
		Name: `__templ_graph_6bca`,
		Function: `function __templ_graph_6bca(dataset){const padding = 60;
  const chartHeight = document.querySelector("svg").getAttribute("height");
  const chartWidth = document.querySelector("svg").getAttribute("width")
  const data = dataset.map(([date, value]) => [new Date(date), value]);

  const formatter = new Intl.NumberFormat("en-US", {
    style: "currency",
    currency: "USD",
  });

  const xScale = d3
    .scaleTime()
    .domain([d3.min(data, ([d]) => d), d3.max(data, ([d]) => d)])
    .range([padding, chartWidth - padding]);

  const yScale = d3
    .scaleLinear()
    .domain([0, d3.max(data, ([, d]) => d)])
    .range([chartHeight - padding, padding]);

  d3.select("svg")
    .append("g")
    .attr("transform", ` + "`" + `translate(0, ${chartHeight - padding})` + "`" + `)
    .attr('id', 'x-axis')
    .call(d3.axisBottom(xScale));
  
  d3.select("svg")
    .append("g")
    .attr("transform", ` + "`" + `translate(${padding}, 0)` + "`" + `)
    .attr('id', 'y-axis')
    .call(d3.axisLeft(yScale));

  d3.select('#gdp-label')
    .attr('x', -chartHeight / 2)
    .attr('y', 1.5 * padding)

  d3.select('#moreinfo-label')
    .attr('x', 3 * chartHeight / 7)
    .attr('y', chartHeight - padding / 4)

  const tooltip = d3.select("div#tooltip")
  const barWidth = (chartWidth - 2 * padding) / data.length;

  d3.select("svg")
    .append("g")
    .selectAll("rect")
    .data(data)
    .enter()
    .append("rect")
    .attr("x", ([d]) => xScale(d))
    .attr("y", ([, d]) => yScale(d))
    .attr("index", (d, i) => i)
    .attr("width", barWidth)
    .attr("height", ([, d]) => chartHeight - yScale(d) - padding)
    .attr('class', 'bar')
    .on("mouseover.overlay", (data, index, targets) =>
      d3.select(targets[index]).attr("fill", "red")
    )
    .on("mouseout.overlay", (data, index, targets) =>
      d3.select(targets[index]).attr("fill", "black")
    )
    .on("mouseover.tooltip", () => tooltip.classed("hidden", false))
    .on("mouseout.tooltip", () => tooltip.classed("hidden", true))
    .on("mousemove.tooltip", ([time, value], index, targets) => {
      const target = targets[index]
      const x = target.getAttribute("x");
      const y = target.getAttribute("y");

      const tooltipLabel = ` + "`" + `${time.getFullYear()} Q${
        Math.floor(time.getMonth() / 3) + 1
      } - ${formatter.format(value)} Billion` + "`" + `;

      tooltip
        .style("top", ` + "`" + `calc(${+y}px - 5em)` + "`" + `)
        .style("left", ` + "`" + `${+x + 4 * barWidth}px` + "`" + `)
        // .attr('data-date', ([date]) => date)
        .text(tooltipLabel);
    });
}`,
		Call:       templ.SafeScript(`__templ_graph_6bca`, dataset),
		CallInline: templ.SafeScriptInline(`__templ_graph_6bca`, dataset),
	}
}

func Chart(data [][2]any) templ.Component {
	return templruntime.GeneratedTemplate(func(templ_7745c5c3_Input templruntime.GeneratedComponentInput) (templ_7745c5c3_Err error) {
		templ_7745c5c3_W, ctx := templ_7745c5c3_Input.Writer, templ_7745c5c3_Input.Context
		if templ_7745c5c3_CtxErr := ctx.Err(); templ_7745c5c3_CtxErr != nil {
			return templ_7745c5c3_CtxErr
		}
		templ_7745c5c3_Buffer, templ_7745c5c3_IsBuffer := templruntime.GetBuffer(templ_7745c5c3_W)
		if !templ_7745c5c3_IsBuffer {
			defer func() {
				templ_7745c5c3_BufErr := templruntime.ReleaseBuffer(templ_7745c5c3_Buffer)
				if templ_7745c5c3_Err == nil {
					templ_7745c5c3_Err = templ_7745c5c3_BufErr
				}
			}()
		}
		ctx = templ.InitializeContext(ctx)
		templ_7745c5c3_Var1 := templ.GetChildren(ctx)
		if templ_7745c5c3_Var1 == nil {
			templ_7745c5c3_Var1 = templ.NopComponent
		}
		ctx = templ.ClearChildren(ctx)
		templ_7745c5c3_Err = templruntime.WriteString(templ_7745c5c3_Buffer, 1, "<html><head><title>FreeCodeCamps Data Visualization Certification</title><script src=\"https://cdn.jsdelivr.net/npm/@tailwindcss/browser@4\"></script><script src=\"https://cdnjs.cloudflare.com/ajax/libs/d3/5.14.2/d3.min.js\"></script></head>")
		if templ_7745c5c3_Err != nil {
			return templ_7745c5c3_Err
		}
		templ_7745c5c3_Err = templ.RenderScriptItems(ctx, templ_7745c5c3_Buffer, graph(data))
		if templ_7745c5c3_Err != nil {
			return templ_7745c5c3_Err
		}
		templ_7745c5c3_Err = templruntime.WriteString(templ_7745c5c3_Buffer, 2, "<body onload=\"")
		if templ_7745c5c3_Err != nil {
			return templ_7745c5c3_Err
		}
		var templ_7745c5c3_Var2 templ.ComponentScript = graph(data)
		_, templ_7745c5c3_Err = templ_7745c5c3_Buffer.WriteString(templ_7745c5c3_Var2.Call)
		if templ_7745c5c3_Err != nil {
			return templ_7745c5c3_Err
		}
		templ_7745c5c3_Err = templruntime.WriteString(templ_7745c5c3_Buffer, 3, "\" class=\"h-screen relative m-4\"><h1 id=\"title\" class=\"text-5xl text-center\">United States GDP</h1><div class=\"flex justify-center\"><svg height=\"500\" width=\"800\"><text transform=\"rotate(-90)\" textAnchor=\"middle\" id=\"gdp-label\">Gross Domestic Product</text> <text id=\"moreinfo-label\">More information at http://www.bea.gov/national/pdf/nipaguid.pdf</text></svg></div><div id=\"tooltip\" class=\"absolute p-4 bg-black/80 text-white z-2 border-2 hidden\"></div></body></html>")
		if templ_7745c5c3_Err != nil {
			return templ_7745c5c3_Err
		}
		return nil
	})
}

var _ = templruntime.GeneratedTemplate
